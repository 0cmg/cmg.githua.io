<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux后台运行Hexo</title>
    <url>/cmg.githua.io/p/8631bdb3.html</url>
    <content><![CDATA[<h2 id="Linux后台运行Hexo"><a href="#Linux后台运行Hexo" class="headerlink" title="Linux后台运行Hexo"></a>Linux后台运行Hexo</h2><blockquote>
<p>自己搭建了一个hexo博客，并部署到阿里云服务器上面，使用“hexo s &amp;”时发现，当关闭终端时，博客系统也会退出，并不能一直在后台运行，通过查阅资料发现可以通过pm2来托管</p>
<p><strong>第一步，安装pm2</strong></p>
<pre class=" language-sh"><code class="language-sh">npm install -g pm2
</code></pre>
<p><strong>第二步，在博客根目录创建一个名为“hexo_run.js”的脚本</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//run</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span>
<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'hexo g &amp;&amp; hexo s'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'exec error: ${error}'</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stdout: ${stdout}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'stderr: ${stderr}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p><strong>第三步，到博客根目录运行脚本</strong></p>
<pre class=" language-sh"><code class="language-sh">pm2 start hexo_run.js
</code></pre>
<p><strong>pm2的相关命令</strong></p>
<pre class=" language-sh"><code class="language-sh">pm2 start hexo_run.js    #启动
pm2 list    #查看pm2管理的所有服务

pm2 stop all    #停止pm2列表的所有服务
pm2 stop 0 #停止进程为0的进程

pm2 reload all #重新载入列表所有进程
pm2 reload 0 #重载列表中进程为0的进程

pm2 restart all    #重启列表中所有的进程
pm2 restart 0    #重启列表中进程为0的进程

pm2 delete 0    #删除列表中进程为0的进程
pm2 delete all    #删除列表中所有的进程
</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Linux</tag>
        <tag>后台运行</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer</title>
    <url>/cmg.githua.io/p/1c53329c.html</url>
    <content><![CDATA[<h3 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h3><h4 id="1、二维数组中的查找"><a href="#1、二维数组中的查找" class="headerlink" title="1、二维数组中的查找"></a>1、二维数组中的查找</h4><blockquote>
<p>题目描述<br>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>[<br>[1,2,8,9],<br>[2,4,9,12],<br>[4,7,10,13],<br>[6,8,11,15]<br>]<br>给定 target = 7，返回 true。<br>给定 target = 3，返回 false。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token boolean">true</span>
</code></pre>
<blockquote>
<p>说明</p>
</blockquote>
<pre class=" language-java"><code class="language-java">存在<span class="token number">7</span>，返回<span class="token boolean">true</span>
</code></pre>
<blockquote>
<p>示例2<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token boolean">false</span>
</code></pre>
<blockquote>
<p>说明</p>
</blockquote>
<pre class=" language-java"><code class="language-java">不存在<span class="token number">3</span>，返回<span class="token boolean">false</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java">思路一：
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num <span class="token operator">:</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-java"><code class="language-java">思路二：
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">,</span> c <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                r<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token operator">--</span>c<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="2、替换空格"><a href="#2、替换空格" class="headerlink" title="2、替换空格"></a>2、替换空格</h4><blockquote>
<p>题目描述<br>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token string">"We Are Happy"</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token string">"We%20Are%20Happy"</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java">思路一：
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param s string字符串 
     * @return string字符串
     */</span>
    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span> <span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="3、从头到尾打印链表"><a href="#3、从头到尾打印链表" class="headerlink" title="3、从头到尾打印链表"></a>3、从头到尾打印链表</h4><blockquote>
<p>题目描述<br>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cmg<span class="token punctuation">.</span>javabase<span class="token punctuation">.</span>offer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintList</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ListNode l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode l4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode l5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ListNode l6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        l1<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        l2<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        l3<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>l4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        l4<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>l5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        l5<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>l6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>listNode <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ListNode node <span class="token operator">=</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> ListNode <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>ListNode next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="4、重建二叉树"><a href="#4、重建二叉树" class="headerlink" title="4、重建二叉树"></a>4、重建二叉树</h4><blockquote>
<p>题目描述<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>
</code></pre>
<h4 id="5、数组中出现次数超过一半的数字"><a href="#5、数组中出现次数超过一半的数字" class="headerlink" title="5、数组中出现次数超过一半的数字"></a>5、数组中出现次数超过一半的数字</h4><blockquote>
<p>题目描述<br>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">2</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">MoreThanHalfNum_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numbers <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> co <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    co<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>co <span class="token operator">>=</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="6、最小的K个数"><a href="#6、最小的K个数" class="headerlink" title="6、最小的K个数"></a>6、最小的K个数</h4><blockquote>
<p>题目描述<br>给定一个数组，找出其中最小的K个数。例如数组元素是4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。如果K&gt;数组的长度，那么返回一个空的数组<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span> 
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
 
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">GetLeastNumbers_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> input<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">int</span> temp <span class="token operator">=</span> input<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
                arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="7、连续子数组的最大和"><a href="#7、连续子数组的最大和" class="headerlink" title="7、连续子数组的最大和"></a>7、连续子数组的最大和</h4><blockquote>
<p>题目描述<br>输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为 O(n).<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">18</span>
</code></pre>
<blockquote>
<p>说明</p>
</blockquote>
<pre class=" language-java"><code class="language-java">输入的数组为<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>—<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>一<span class="token number">5</span><span class="token punctuation">}</span>，和最大的子数组为<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>一<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>，因此输出为该子数组的和 <span class="token number">18</span>。 
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java">
</code></pre>
<h4 id="8、整数中1出现的次数（从1到n整数中1出现的次数）"><a href="#8、整数中1出现的次数（从1到n整数中1出现的次数）" class="headerlink" title="8、整数中1出现的次数（从1到n整数中1出现的次数）"></a>8、整数中1出现的次数（从1到n整数中1出现的次数）</h4><blockquote>
<p>题目描述<br>求出1<del>13的整数中1出现的次数,并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">13</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">6</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">NumberOf1Between1AndN_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>ch <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="9、把数组排成最小的数"><a href="#9、把数组排成最小的数" class="headerlink" title="9、把数组排成最小的数"></a>9、把数组排成最小的数</h4><blockquote>
<p>题目描述<br>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">321</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token string">"321323"</span>
</code></pre>
<h4 id="10、丑数"><a href="#10、丑数" class="headerlink" title="10、丑数"></a>10、丑数</h4><blockquote>
<p>题目描述<br>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">7</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">8</span>
</code></pre>
<h4 id="11、第一个只出现一次的字符"><a href="#11、第一个只出现一次的字符" class="headerlink" title="11、第一个只出现一次的字符"></a>11、第一个只出现一次的字符</h4><blockquote>
<p>题目描述<br>在一个字符串(0&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.（从0开始计数）<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token string">"google"</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">4</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">FirstNotRepeatingChar</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> firstIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lastIndex <span class="token operator">==</span> firstIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> firstIndex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="12、数组中的逆序对"><a href="#12、数组中的逆序对" class="headerlink" title="12、数组中的逆序对"></a>12、数组中的逆序对</h4><blockquote>
<p>题目描述<br>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007<br>对于50%50%的数据,size\leq 10^4<em>s<strong>i</strong>z**e</em>≤104<br>对于75%75%的数据,size\leq 10^5<em>s<strong>i</strong>z**e</em>≤105<br>对于100%100%的数据,size\leq 2<em>10^5</em>s<strong>i</strong>z*<em>e</em>≤2∗105<br>输入描述:</p>
</blockquote>
<pre class=" language-java"><code class="language-java">题目保证输入的数组中没有的相同的数字
</code></pre>
<blockquote>
<p>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">7</span>
</code></pre>
<h4 id="13、两个链表的第一个公共结点"><a href="#13、两个链表的第一个公共结点" class="headerlink" title="13、两个链表的第一个公共结点"></a>13、两个链表的第一个公共结点</h4><blockquote>
<p>题目描述<br>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）<br>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ListNode <span class="token function">FindFirstCommonNode</span> <span class="token punctuation">(</span> ListNode pHead1 <span class="token punctuation">,</span> ListNode pHead2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ListNode node1 <span class="token operator">=</span> pHead1<span class="token punctuation">;</span>
        ListNode node2 <span class="token operator">=</span> pHead2<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node1 <span class="token operator">==</span> null <span class="token operator">||</span> node2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>node1 <span class="token operator">!=</span> node2<span class="token punctuation">)</span><span class="token punctuation">{</span>
            node1 <span class="token operator">=</span> node1 <span class="token operator">==</span> null <span class="token operator">?</span> pHead1 <span class="token operator">:</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            node2 <span class="token operator">=</span> node2 <span class="token operator">==</span> null <span class="token operator">?</span> pHead2 <span class="token operator">:</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> node1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="14、数字在升序数组中出现的次数"><a href="#14、数字在升序数组中出现的次数" class="headerlink" title="14、数字在升序数组中出现的次数"></a>14、数字在升序数组中出现的次数</h4><blockquote>
<p>题目描述<br>统计一个数字在升序数组中出现的次数。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">4</span>
</code></pre>
<blockquote>
<p>解题</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">GetNumberOfK_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> k <span class="token operator">></span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> cnt <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
                cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="15、二叉树的深度"><a href="#15、二叉树的深度" class="headerlink" title="15、二叉树的深度"></a>15、二叉树的深度</h4><blockquote>
<p>题目描述<br>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。<br>示例1<br>输入</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>返回值</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token number">4</span>
</code></pre>
]]></content>
      <categories>
        <category>笔试</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>编程题</tag>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK各个历史版本下载方法</title>
    <url>/cmg.githua.io/p/b68953c6.html</url>
    <content><![CDATA[<h3 id="JDK各个历史版本下载方法"><a href="#JDK各个历史版本下载方法" class="headerlink" title="JDK各个历史版本下载方法"></a>JDK各个历史版本下载方法</h3><h4 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h4><blockquote>
<p>Oracle官网通常只会把最近的版本放在最前面，在版权已经发生变更的今天，如果要下载一个商业使用安全的JDK8，那么就需要从如下几个链接进行查找了。</p>
<p>如果商业使用JDK8，那么请使用202（包括）以下的版本。</p>
<p>此部分资料来源于广大网友提供，非原创，这里仅仅做一个记录。</p>
</blockquote>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><blockquote>
<p>java SE 1.6各个版本 jdk api ：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html</a></p>
<p>java SE 1.7各个版本 jdk api ：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html</a></p>
<p>java SE 1.8各个版本 jdk api ：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>SoftWare</category>
        <category>JDK</category>
      </categories>
      <tags>
        <tag>JDK</tag>
        <tag>Oracle</tag>
        <tag>历史版本</tag>
        <tag>DownLoad</tag>
      </tags>
  </entry>
  <entry>
    <title>根据WSDL接口使用Apache cxf生成Java代码</title>
    <url>/cmg.githua.io/p/319f657d.html</url>
    <content><![CDATA[<h2 id="根据WSDL接口使用Apache-cxf生成Java代码"><a href="#根据WSDL接口使用Apache-cxf生成Java代码" class="headerlink" title="根据WSDL接口使用Apache cxf生成Java代码"></a>根据WSDL接口使用Apache cxf生成Java代码</h2><blockquote>
<p>首先说下有两种方式生成wsdl客户端代码：</p>
<ul>
<li>1.通过Apache cxf 的wsdl2java生成<ul>
<li>1).先下载apace cxf包，配置环境变量，和java 的环境变量的配置方式一样。<br>在环境变量中配置CXF_HOME 值为D:\cxf\apache-cxf-3.0.0,在PATH中加入%CXF_HOME%\bin<br>验证环境变量有无配置成功，cmd 窗口，输入  wsdl2java   </li>
<li> 2).wsdl2java用法： </li>
</ul>
</li>
</ul>
<pre class=" language-bash"><code class="language-bash">wsdl2java -p com -d src -all  wsdl
-p<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> 指定其wsdl的命名空间，也就是要生成代码的包名
-d<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> 指定要产生代码所在目录<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
-client 生成客户端测试web service的代码<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
-server 生成服务器启动web<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> service的代码<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
-impl 生成web service的实现代码<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
-ant<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> 生成build.xml文件<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
-all 生成所有开始端点代码：types,service proxy,,service interface, server mainline, client mainline, implementation object, and an Ant build.xml file.<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>
</code></pre>
<ul>
<li><p>2.通过soapui 工具生成wsdl 客户端代码</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Java/20210527173926.jpg" alt="图一"></p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Java/20210527173927.jpg" alt="图二"></p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Java/20210527173929.jpg" alt="图三"></p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Java/20210527173930.jpg" alt="图四"></p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Java/20210527173928.jpg" alt="图五"></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>WebService</category>
      </categories>
      <tags>
        <tag>WSDL</tag>
        <tag>Apache xcf</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle笔记(一)创建表空间及用户</title>
    <url>/cmg.githua.io/p/9dc7261d.html</url>
    <content><![CDATA[<h2 id="创建表空间及用户"><a href="#创建表空间及用户" class="headerlink" title="创建表空间及用户"></a>创建表空间及用户</h2><h3 id="1-创建表空间"><a href="#1-创建表空间" class="headerlink" title="1.创建表空间"></a>1.创建表空间</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建表空间</span>
<span class="token keyword">create</span> <span class="token keyword">tablespace</span> tbs_gcms  datafile <span class="token string">'/home/oracle/app/oracle/oradata/helowin/tbs_gcms01.dbf'</span> size 1g <span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建用户</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> gcms identified <span class="token keyword">by</span> gcms <span class="token keyword">default</span> <span class="token keyword">tablespace</span> tbs_gcms<span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-给用户授权"><a href="#3-给用户授权" class="headerlink" title="3.给用户授权"></a>3.给用户授权</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--给创建的用户授权</span>
<span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">view</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">session</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">procedure</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">public</span> synonym  <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">execute</span> <span class="token keyword">on</span> dbms_scheduler <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">execute</span> <span class="token keyword">on</span> dbms_lock <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">execute</span> <span class="token keyword">on</span> dbms_job <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">create</span> job <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> manage scheduler  <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">create</span> library <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> unlimited <span class="token keyword">tablespace</span> <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> debug <span class="token keyword">any</span> <span class="token keyword">procedure</span><span class="token punctuation">,</span> debug <span class="token keyword">connect</span> <span class="token keyword">session</span> <span class="token keyword">to</span> gcms<span class="token punctuation">;</span>
<span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">public</span> <span class="token keyword">database</span> link<span class="token punctuation">,</span><span class="token keyword">drop</span> <span class="token keyword">public</span> <span class="token keyword">database</span> link <span class="token keyword">to</span> gcms<span class="token punctuation">;</span> 
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-删除表空间"><a href="#4-删除表空间" class="headerlink" title="4.删除表空间"></a>4.删除表空间</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">tablespace</span> tablespace_name including contents <span class="token operator">and</span> datafiles<span class="token punctuation">;</span>
</code></pre>
<h3 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5.删除用户"></a>5.删除用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> user_name <span class="token keyword">cascade</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>创建表空间</tag>
        <tag>创建用户</tag>
        <tag>授权</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle笔记(二)锁表检测及处理</title>
    <url>/cmg.githua.io/p/7b6bf07a.html</url>
    <content><![CDATA[<h2 id="锁表检测及处理"><a href="#锁表检测及处理" class="headerlink" title="锁表检测及处理"></a>锁表检测及处理</h2><h3 id="1-锁表检测"><a href="#1-锁表检测" class="headerlink" title="1.锁表检测"></a>1.锁表检测</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查询锁表的进程及执行命令</span>
<span class="token comment" spellcheck="true">--使用sys用户登陆执行</span>
<span class="token keyword">select</span> 
       <span class="token string">'alter system kill session '</span><span class="token string">''</span><span class="token operator">||</span> t2<span class="token punctuation">.</span>sid <span class="token operator">||</span><span class="token string">','</span> <span class="token operator">||</span>t2<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment" spellcheck="true">#||''';',</span>
       t2<span class="token punctuation">.</span>username<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>sid<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span><span class="token keyword">serial</span><span class="token comment" spellcheck="true">#,</span>
       t3<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>OSUSER<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>MACHINE<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>PROGRAM<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>LOGON_TIME<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>COMMAND<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>LOCKWAIT<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>SADDR<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>PADDR<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>TADDR<span class="token punctuation">,</span>
       t2<span class="token punctuation">.</span>SQL_ADDRESS<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>LOCKED_MODE
  <span class="token keyword">from</span> v$locked_object t1<span class="token punctuation">,</span> v$<span class="token keyword">session</span> t2<span class="token punctuation">,</span> dba_objects t3
 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>session_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>sid
   <span class="token operator">and</span> t1<span class="token punctuation">.</span>object_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>object_id
 <span class="token keyword">order</span> <span class="token keyword">by</span> t2<span class="token punctuation">.</span>logon_time<span class="token punctuation">;</span>
</code></pre>
<h3 id="2-锁表处理"><a href="#2-锁表处理" class="headerlink" title="2.锁表处理"></a>2.锁表处理</h3><pre class=" language-sql"><code class="language-sql">使用sys用户执行上面语句查询第一列语句；
</code></pre>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle锁表</tag>
        <tag>锁表检测</tag>
        <tag>锁表处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Git push报错</title>
    <url>/cmg.githua.io/p/70b160a5.html</url>
    <content><![CDATA[<h2 id="Git错误列表"><a href="#Git错误列表" class="headerlink" title="Git错误列表"></a>Git错误列表</h2><h3 id="1-git提交代码报错"><a href="#1-git提交代码报错" class="headerlink" title="1.git提交代码报错"></a>1.git提交代码报错</h3><blockquote>
<p>错误描述：Push to origin/master was rejected<br>使用git bash执行以下命令</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories
</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git报错合集</tag>
        <tag>push</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+GitHub搭建图床</title>
    <url>/cmg.githua.io/p/e4df49cd.html</url>
    <content><![CDATA[<h2 id="PicGo-GitHub搭建图床"><a href="#PicGo-GitHub搭建图床" class="headerlink" title="PicGo + GitHub搭建图床"></a>PicGo + GitHub搭建图床</h2><h3 id="一、GitHub-仓库设置"><a href="#一、GitHub-仓库设置" class="headerlink" title="一、GitHub 仓库设置"></a>一、GitHub 仓库设置</h3><blockquote>
<p>流程：新建 public 仓库 -&gt; 创建 token -&gt; 复制 token 备用</p>
<p>1.1 新建仓库<br>点击 git 主页右上角的 + 创建 New repository；</p>
<p>填写仓库信息，例如我就创建了一个 cloudimg 的仓库。这里注意，仓库得设置为 Public 因为后面通过客户端访问算是外部访问，因此无法访问 Private ，这样的话图片传上来之后只能存储不能显示。所以要设置为 Public。</p>
<p>1.2 创建 token 并复制保存</p>
<p>此时仓库已经建立，点击右上角头像，然后进入设置；</p>
<p>在页面最下找到 <code>Developer settings</code>，点击进入；</p>
<p>创建 token；</p>
<p>填 description（也是随心填），勾选复选框 repo ，接着到页面底部 <code>Generate token</code> 就完成了；</p>
<p>然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下。</p>
</blockquote>
<h3 id="二、PicGo客户端配置"><a href="#二、PicGo客户端配置" class="headerlink" title="二、PicGo客户端配置"></a>二、PicGo客户端配置</h3><blockquote>
<p>2.1 下载&amp;安装</p>
<p>PicGo （目前 2.0.4）是一个开源的图床工具，非常优秀。可以到 git 上下载，但下载速度太慢，所以我放了一个百度云的链接，速度快很多。</p>
<p>git地址：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p>
<p>Win版下载链接：<a href="https://pan.baidu.com/s/17KycPMoqNCnc1cR_yQO8nQ">百度云</a> 密码：PicG</p>
<p>2.2 配置</p>
<p>仓库名 即你的用户名/仓库名<br>分支名 默认 main<br>Token 就是刚刚复制的那一串字符<br>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 data 这个文件夹<br>域名 <a href="https://raw.githubusercontent.com/yefcion/cloudimg/master%E8%BF%99%E4%B8%AA%E8%A6%81%E6%94%B9%E4%B8%80%E4%B8%8B">https://raw.githubusercontent.com/yefcion/cloudimg/master这个要改一下</a> 格式 <a href="https://raw.githubusercontent.com/[username]/[%E4%BB%93%E5%BA%93%E5%90%8D]/master">https://raw.githubusercontent.com/[username]/[仓库名]/master</a></p>
<p>然后点确定就可以了。</p>
<p>注：这里提供一个加速访问图片的方法：CDN加速，具体原理自行百度（我还不是很懂）<br>将上面的域名改为：<br>原 <a href="https://raw.githubusercontent.com/yefcion/cloudimg/master">https://raw.githubusercontent.com/yefcion/cloudimg/master</a><br>现 <a href="https://cdn.jsdelivr.net/gh/yefcion/cloudimg@master">https://cdn.jsdelivr.net/gh/yefcion/cloudimg@master</a></p>
</blockquote>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>GitHub</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/cmg.githua.io/p/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>示例</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA报错合集</title>
    <url>/cmg.githua.io/p/4f9f6511.html</url>
    <content><![CDATA[<h2 id="IDEA错误列表"><a href="#IDEA错误列表" class="headerlink" title="IDEA错误列表"></a>IDEA错误列表</h2><h3 id="1-错误1"><a href="#1-错误1" class="headerlink" title="1.错误1"></a>1.错误1</h3><blockquote>
<p>错误描述：Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project MavenProj1: Compilation failure<br>解决方案1<br>在pom.xml中指定compiler插件，所以在pom.xml中加入插件解决了问题：</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>解决方案2<br>在maven的setting.xml中指定jdk版本。<br>setting.xml在这里面找。<br>[<img src="https://z3.ax1x.com/2021/05/07/g3PiQK.png" alt="setting文件位置"><br>然后加入以下代码, 要在 <profiles> </profiles> 块内加入。</p>
</blockquote>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
</code></pre>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA报错合集</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8设置防火墙</title>
    <url>/cmg.githua.io/p/9b3f6412.html</url>
    <content><![CDATA[<h2 id="CentOS-8设置防火墙"><a href="#CentOS-8设置防火墙" class="headerlink" title="CentOS 8设置防火墙"></a>CentOS 8设置防火墙</h2><p>启动防火墙：</p>
<pre class=" language-shell"><code class="language-shell">systemctl start firewalld.service
</code></pre>
<p>关闭防火墙：</p>
<pre class=" language-shell"><code class="language-shell">systemctl stop firewalld.service
</code></pre>
<p>重启防火墙：</p>
<pre class=" language-shell"><code class="language-shell">systemctl restart firewalld.service
</code></pre>
<p>开机启用防火墙：</p>
<pre class=" language-shell"><code class="language-shell">systemctl enable firewalld.service
</code></pre>
<p>开机禁用防火墙：</p>
<pre class=" language-shell"><code class="language-shell">systemctl disable firewalld.service
</code></pre>
<p>查看防火墙状态：</p>
<pre class=" language-shell"><code class="language-shell">systemctl status firewalld.service
</code></pre>
<p>查看端口：</p>
<pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --list-ports
</code></pre>
<p>添加端口：</p>
<pre class=" language-shell"><code class="language-shell">firewall-cmd --permanent --zone=public --add-port=8080/tcp
</code></pre>
<p>删除端口：</p>
<pre class=" language-shell"><code class="language-shell">firewall-cmd --permanent --zone=public --remove-port=8080/tcp
</code></pre>
<p>重新加载防火墙规则：</p>
<pre class=" language-shell"><code class="language-shell">firewall-cmd --reload
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>firewall</tag>
        <tag>CentOS 8</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令大全</title>
    <url>/cmg.githua.io/p/aba20dc.html</url>
    <content><![CDATA[<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><h3 id="1-tar"><a href="#1-tar" class="headerlink" title="1. tar"></a>1. tar</h3><blockquote>
<p>1．命令格式：</p>
<p>tar[必要参数][选择参数][文件] </p>
<p>2．命令功能：</p>
<p>用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的 </p>
<p>3．命令参数：</p>
<p>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件</p>
<p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p>
<p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出</p>
<p>下面的参数-f是必须的</p>
<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>
<p>使用示例：</p>
<p># tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p>
<p># tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p>
<p># tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p>
<p># tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p>
<p># tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-x是解开的意思</p>
<p>压缩命令示例：</p>
<ul>
<li>tar –cvf jpg.tar *.jpg 将目录里所有jpg文件打包成tar.jpg</li>
<li>tar –czf jpg.tar.gz *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li>
<li>tar –cjf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li>
<li>tar –cZf jpg.tar.Z *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li>
<li>rar a jpg.rar *.jpg rar格式的压缩，需要先下载rar for linux</li>
<li>zip jpg.zip *.jpg  zip格式的压缩，需要先下载zip for linux </li>
</ul>
<p>解压缩命令示例：</p>
<ul>
<li>tar –xvf file.tar 解压 tar包</li>
<li>tar -xzvf file.tar.gz 解压tar.gz</li>
<li>tar -xjvf file.tar.bz2  解压 tar.bz2</li>
<li>tar –xZvf file.tar.Z  解压tar.Z</li>
<li>unrar e file.rar 解压rar</li>
<li>unzip file.zip 解压zip</li>
</ul>
<p>总结：</p>
<ol>
<li>*.tar 用 tar –xvf 解压</li>
<li>*.gz 用 gzip -d或者gunzip 解压</li>
<li><em>.tar.gz和</em>.tgz 用 tar –xzf 解压</li>
<li>*.bz2 用 bzip2 -d或者用bunzip2 解压</li>
<li>*.tar.bz2用tar –xjf 解压</li>
<li>*.Z 用 uncompress 解压</li>
<li>*.tar.Z 用tar –xZf 解压</li>
<li>*.rar 用 unrar e解压</li>
<li>*.zip 用 unzip 解压</li>
</ol>
<p>其他压缩命令：</p>
<p>.gz<br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName</p>
<p>.tar.gz 和 .tgz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName</p>
<p>.bz2<br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName</p>
<p>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName</p>
<p>.bz<br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知</p>
<p>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知</p>
<p>.Z<br>解压：uncompress FileName.Z<br>压缩：compress FileName</p>
<p>.tar.Z<br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName</p>
<p>.zip<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName</p>
<p>.rar<br>解压：rar x FileName.rar<br>压缩：rar a FileName.rar DirName </p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux Command</tag>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Git</title>
    <url>/cmg.githua.io/p/cb641173.html</url>
    <content><![CDATA[<h2 id="Linux安装Git"><a href="#Linux安装Git" class="headerlink" title="Linux安装Git"></a>Linux安装Git</h2><h3 id="一、Git介绍"><a href="#一、Git介绍" class="headerlink" title="一、Git介绍"></a>一、Git介绍</h3><blockquote>
<p>Git — The stupid content tracker, 傻瓜内容跟踪器。Linus Torvalds 是这样给我们介绍 Git 的。</p>
<p>Git 是用于 Linux<a href="https://baike.baidu.com/item/%E5%86%85%E6%A0%B8">内核</a>开发的<a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>
</blockquote>
<h3 id="二、准备"><a href="#二、准备" class="headerlink" title="二、准备"></a>二、准备</h3><blockquote>
<ul>
<li>一台服务器</li>
<li>远程连接工具：putty、winscp、</li>
<li>Git是目前流行的非常好用的版本控制工具，这里介绍两种安装方式，1、yum安装，2、从github上下载最新的源码编译后安装</li>
</ul>
</blockquote>
<h3 id="三、yum安装"><a href="#三、yum安装" class="headerlink" title="三、yum安装"></a>三、yum安装</h3><blockquote>
<p>1、在Linux上是有yum安装Git，非常简单，只需要一行命令</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">git</span>
</code></pre>
<p>2.输入 git –version查看Git是否安装完成以及查看其版本号</p>
<pre><code> git --version
</code></pre>
</blockquote>
<h3 id="四、从GitHub下载源码安装"><a href="#四、从GitHub下载源码安装" class="headerlink" title="四、从GitHub下载源码安装"></a>四、从GitHub下载源码安装</h3><blockquote>
<p>1.首先我们需要删除旧的Git</p>
<pre><code>yum -y remove git
</code></pre>
<p>2.进入git在GitHub上发布版本页面<a href="https://github.com/git/git/releases%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89git%E5%B7%B2%E5%8F%91%E5%B8%83%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E9%80%89%E6%8B%A9%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84tar.gz%E5%8C%85%E3%80%82">https://github.com/git/git/releases，这个页面我们可以找到所有git已发布的版本。这里我们选择最新版的tar.gz包。</a></p>
<pre><code>https://github.com/git/git/releases
</code></pre>
<p>3.下载最新版本的tar.gz的Git到本地电脑上，利用ftp工具将压缩包上传至Linux服务器/usr/local目录下</p>
<p>4.进入/usr/local 目录解压git文件</p>
<pre><code>tar -zxvf git-2.25.4.tar.gz
</code></pre>
<p>5.拿到解压后的源码以后我们需要编译源码了，不过在此之前需要安装编译所需要的依赖。</p>
<pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker
</code></pre>
<p>6.编译git源码，进入cd /usr/local/git-2.25.4 目录</p>
<pre><code>make prefix=/usr/local/git all
</code></pre>
<p>7.安装git至/usr/bin/git路径</p>
<pre><code>make prefix=/usr/local/git install
</code></pre>
<p>8.配置环境变量</p>
<pre><code>vi /etc/profile 
</code></pre>
<p>\9. 在底部加上如下</p>
<pre><code>export PATH=$PATH:/usr/bin/git/bin
</code></pre>
<p>10.刷新环境变量</p>
<pre><code>source /etc/profile
</code></pre>
<p>11.查看Git是否安装完成</p>
<pre><code>git --version
</code></pre>
<p>至此，从github上下载最新的源码编译后安装git完成。</p>
</blockquote>
<h3 id="五、基本操作命令"><a href="#五、基本操作命令" class="headerlink" title="五、基本操作命令"></a>五、基本操作命令</h3><blockquote>
<h2 id="1-Git基本配置"><a href="#1-Git基本配置" class="headerlink" title="1. Git基本配置"></a>1. Git基本配置</h2><p>git config可以配置git的参数，可以使用<code>git config --list</code>查看已经配置的git参数。其中有三个级别的保存位置，<code>--system</code>、<code>--global</code>、<code>--local</code>，分别表示所有用户（本系统）、当前用户（全局）、本地配置（当前目录），默认使用<code>--local</code>。</p>
<h3 id="配置用户名及邮箱"><a href="#配置用户名及邮箱" class="headerlink" title="配置用户名及邮箱"></a>配置用户名及邮箱</h3><p>在使用Git提交前，必须配置用户名和邮箱，这些信息会永久保存到历史记录中。</p>
<pre><code>git config --global user.name "Tocy"
git config --global user.email zyvj@qq.com
</code></pre>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>如果在windows下建议还是配置下默认文本编辑器<code>core.editor</code>和差异分析工具<code>merge.tool</code>。</p>
<h2 id="2-创建Git仓库"><a href="#2-创建Git仓库" class="headerlink" title="2. 创建Git仓库"></a>2. 创建Git仓库</h2><p>可以直接调用<code>git init</code>初始化当前目录，即创建Git仓库。</p>
<h2 id="3-获得Git仓库"><a href="#3-获得Git仓库" class="headerlink" title="3. 获得Git仓库"></a>3. 获得Git仓库</h2><p>如果需要克隆远程仓库，可以使用<code>git clone</code>，比如：</p>
<pre><code>git clone https://git.oschina.net/Tocy/SampleCode.git
</code></pre>
<h2 id="4-提交更新"><a href="#4-提交更新" class="headerlink" title="4. 提交更新"></a>4. 提交更新</h2><p>在windows下的Git GUI中，提交很简单，右键-TortoiseGit-Commit。那么命令行下需要怎么处理？<br>Git中每个文件都有三种状态：committed、staged、modified。它们之间关系如下：</p>
<blockquote>
<p>commit &lt;– stage &lt;– modify<br>commit –&gt; — –modify</p>
</blockquote>
<p>我们获取的Git仓库中的所有文件都是committed状态，如果你在本地修改了文件a，a的状态就变成modified的；如果使用<code>git add a</code>，a的状态变成staged；如果使用<code>git commit</code>，a的状态就变成commited。这种状态变化也说明复制代码是很方便的，但是提交更新请慎重。<br>当然还有一种文件状态，未跟踪状态（unversioned/untracked），通过使用<code>git add</code>可以把未跟踪状态变更为staged；通过<code>git rm</code>可以将staged或者committed状态变为未跟踪状态。</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>通常提交前先检查下修改了什么内容，当前Git目录下各文件的状态。</p>
<pre><code>$ git status
On branch master

Initial commit

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        Readme.md

nothing added to commit but untracked files present (use "git add" to track)
</code></pre>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add可以添加文件或者目录，也可以使用通配符。比如：</p>
<pre><code>git add Readme.md    # add file only
git add *.cpp         # add all cpp files
git add /home/code/     # add all files in /home/code
</code></pre>
<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>git diff可以查看当前目录的所有修改。<br>提交之前，还是单独确认下处于staged状态的文件有哪些，并保证修改正确。在实际应用中，可能还需要使用<code>git diff</code>导出PATCH做代码走读。<br>可以使用<code>git diff --staged</code>或<code>git diff --cached</code>查看staged与上次提交快照之间的区别。</p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>提交前需慎重。直接调用<code>git commit</code>会弹出编辑器，输入提交日志（如果是多行日志，建议使用）。<br>针对单行日志提交的情况，可以使用如下命令：<code>git commit -m "add readme"</code>。<br>还有一种快捷的提交方式，直接跳过stage缓存区，直接提交当前目录下的所有修改<code>git commit -a</code>（使用这个命令前建议确认下当前目录的修改是否正确、必须）。</p>
<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>git rm会把文件从当前目录删除（不会保存删除的文件）。如果需要从Git仓库中删除，但保留在当前工作目录中，亦即从跟踪清单中删除，可以使用<code>git rm --cached readme.md</code>。</p>
<h2 id="5-提交历史查看"><a href="#5-提交历史查看" class="headerlink" title="5. 提交历史查看"></a>5. 提交历史查看</h2><p>可以使用<code>git log</code>查看当前工程的所有提交的日志。</p>
<pre><code>git log --stat        # 仅显示摘要选项
git log --pretty=oneline        # 定制记录格式
git log --graph        # 图像化分支和版本更新
</code></pre>
<h2 id="6-撤销更新"><a href="#6-撤销更新" class="headerlink" title="6. 撤销更新"></a>6. 撤销更新</h2><h2 id="7-远程仓库"><a href="#7-远程仓库" class="headerlink" title="7. 远程仓库"></a>7. 远程仓库</h2><p>可以使用<code>git remote</code>查看当前的远程库。<br><code>git remote -v</code>可以显示对应的克隆地址。（对于多个远程仓库很有用）</p>
<h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p><code>git remote add [short_name] [url]</code>可以添加新的远程仓库。</p>
<h3 id="从远程仓库抓取数据"><a href="#从远程仓库抓取数据" class="headerlink" title="从远程仓库抓取数据"></a>从远程仓库抓取数据</h3><pre><code>git fetch [remote-name]`可以从远程仓库抓取数据到本地。
也可以使用`git pull
</code></pre>
<h3 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h3><p><code>git push [remote_name] [branch_name]</code><br>默认使用origin和master。</p>
<h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3><pre><code>git remote show origin
</code></pre>
<h3 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h3><pre><code>git remote rename [old_name] [new_name]`
`git remote rm [remote_name]
</code></pre>
<h2 id="8-打Tags"><a href="#8-打Tags" class="headerlink" title="8. 打Tags"></a>8. 打Tags</h2><p>可使用<code>git tag</code>显示当前库中的标签。</p>
<h3 id="添加标签（含附注）"><a href="#添加标签（含附注）" class="headerlink" title="添加标签（含附注）"></a>添加标签（含附注）</h3><pre><code>git tag -a v0.1 -m "my version 0.1"`
使用如下命令查看Tag日志信息（指定对应标签的名字）
`git show v0.1`
也可使用SHA-1的提交表示创建tag：
`git tag -a v0.2 [SHA-1] -m "my version 0.2"
</code></pre>
<h3 id="分享标签"><a href="#分享标签" class="headerlink" title="分享标签"></a>分享标签</h3><p>默认的，git push不会推送标签信息到远程仓库，需要通过命令显式推送。<br><code>git push origin v0.1</code><br>如果需要推送所有标签，使用<br><code>git push origin --tags</code></p>
<h2 id="9-Git分支"><a href="#9-Git分支" class="headerlink" title="9. Git分支"></a>9. Git分支</h2><p>git分支是轻量级的，速度很快，仅记录索引信息。</p>
<h3 id="显示所有分支"><a href="#显示所有分支" class="headerlink" title="显示所有分支"></a>显示所有分支</h3><p>使用<code>git branch</code>可显示当前所有分支。<br>可以使用–merged和–no-merged查看已经合并、未合并的分支。</p>
<h3 id="创建及切换分支"><a href="#创建及切换分支" class="headerlink" title="创建及切换分支"></a>创建及切换分支</h3><p>可以使用下面命令直接切换并创建分支<br><code>git checkout -b testing</code><br>等价于</p>
<pre><code>$ git branch testing     # 创建testing 分支
$ git checkout testing    # 切换到testing分支
</code></pre>
<p>注意切换分支时请保持工作目录没有未提交的修改。Git鼓励使用分支，处理完问题之后合并分支即可。</p>
<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>将hotfix分支合并到master（主分支）上，需要通过下面命令：</p>
<pre><code>$ git checkout master
$ git merge hotfix
</code></pre>
<p>合并之后可以使用<code>git branch -d hotfix</code>删除分支。<br>如果合并时存在冲突，需要手工修改。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
        <tag>Linux安装Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装NodeJS</title>
    <url>/cmg.githua.io/p/fe4ed47c.html</url>
    <content><![CDATA[<h2 id="Linux系统安装Nodejs"><a href="#Linux系统安装Nodejs" class="headerlink" title="Linux系统安装Nodejs"></a>Linux系统安装Nodejs</h2><h3 id="一、下载安装包"><a href="#一、下载安装包" class="headerlink" title="一、下载安装包"></a>一、下载安装包</h3><blockquote>
<p><strong>方法一：下载到本地后上传到服务器</strong></p>
<p>下载地址;<a href="https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz">https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz</a></p>
<h6 id="方法二：通过wget下载到本地目录-推荐"><a href="#方法二：通过wget下载到本地目录-推荐" class="headerlink" title="方法二：通过wget下载到本地目录(推荐)"></a>方法二：通过<code>wget</code>下载到本地目录(推荐)</h6><p>首先我们在<code>/usr/local</code>文件夹下新建一个名为<code>nodejs</code>的文件夹</p>
<p>进入nodejs文件夹，执行下列命令（下载地址根据你自己的情况去官网复制），就可以将官网编译好了的Nodejs的压缩包下载至nodejs文件夹。</p>
<p>$ wget <a href="https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz">https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz</a></p>
</blockquote>
<h3 id="二、解压及重命名"><a href="#二、解压及重命名" class="headerlink" title="二、解压及重命名"></a>二、解压及重命名</h3><blockquote>
<p>压缩包已经在<code>nodejs</code>文件夹里面了，现在我们进行解压操作。<br>执行：</p>
<pre class=" language-shell"><code class="language-shell">$ xz -d node-v14.17.0-linux-x64.tar.xz
</code></pre>
<p>再执行：</p>
<pre class=" language-shell"><code class="language-shell">$ tar -xf node-v14.17.0-linux-x64.tar
</code></pre>
<p>我们需要的Nodejs应用文件夹就解压出来了，现在下载的压缩包已经没用了，我们需要删除它，并且我们需要将node-v14.17.0-linux-x64文件夹中的所有内容移动到它的上级目录nodejs中，这里其实就相当于一个重命名操作。<br>执行：</p>
<pre><code>$ rm -f node-v14.17.0-linux-x64.tar
$ mv node-v14.17.0-linux-x64/* /usr/local/nodejs
</code></pre>
<p>OK，移动成功，现在我们要删除无用的空文件夹<code>node-v14.17.0-linux-x64</code><br>执行：</p>
<pre class=" language-shell"><code class="language-shell">$ rm -rf node-v14.17.0-linux-x64
</code></pre>
</blockquote>
<h3 id="三、建立软连接"><a href="#三、建立软连接" class="headerlink" title="三、建立软连接"></a>三、建立软连接</h3><blockquote>
<p>此时的bin文件夹中已经存在node以及npm，如果你进入到对应文件的中执行命令行一点问题都没有，不过不是全局的，所以通过建立软链接的方式将这个设置为全局。<br>执行：</p>
<pre><code>$ ln -s /usr/local/nodejs/bin/node /usr/local/bin
$ ln -s /usr/local/nodejs/bin/npm /usr/local/bin
</code></pre>
<p>输入以下命令检查安装结果：</p>
<pre><code>node -v
</code></pre>
<p>出现具体版本号，安装完成！</p>
</blockquote>
<h3 id="四、换源"><a href="#四、换源" class="headerlink" title="四、换源"></a>四、换源</h3><blockquote>
<p>npm默认使用的是官方源，在国内使用非常不便。为了便于国内开发者下载包，有热心的开发者提供了nrm，即对npm源管理的工具。</p>
<ol>
<li><p>通过<code>npm install -g nrm</code>进行全局安装。</p>
</li>
<li><p>查看当前源</p>
<pre><code>nrm ls
</code></pre>
</li>
<li><p>使用淘宝源</p>
<pre class=" language-bash"><code class="language-bash">nrm use taobao
</code></pre>
</li>
</ol>
</blockquote>
<h3 id="五、NPM的替代工具YARN"><a href="#五、NPM的替代工具YARN" class="headerlink" title="五、NPM的替代工具YARN"></a>五、NPM的替代工具YARN</h3><blockquote>
<p>安装</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yarn
</code></pre>
<p>验证版本</p>
<pre class=" language-bash"><code class="language-bash">yarn -v
</code></pre>
<p>使用介绍</p>
<pre><code>npm yarn
</code></pre>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"><strong>NPM</strong></th>
<th align="center"><strong>YARN</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">初始化</td>
<td align="center">npm init</td>
<td align="center">yarn init</td>
</tr>
<tr>
<td align="center">默认安装依赖</td>
<td align="center">npm install</td>
<td align="center">yarn install</td>
</tr>
<tr>
<td align="center">安装某个依赖并保存</td>
<td align="center">npm install xxxx -save</td>
<td align="center">yarn add xxxx</td>
</tr>
<tr>
<td align="center">安装全局依赖</td>
<td align="center">npm install -g xxxx</td>
<td align="center">yarn global add xxxx</td>
</tr>
<tr>
<td align="center">移除依赖</td>
<td align="center">npm uninstall xxxx -save</td>
<td align="center">yarn remove xxxx</td>
</tr>
<tr>
<td align="center">更新依赖</td>
<td align="center">npm update</td>
<td align="center">yarn upgrade xxxx</td>
</tr>
<tr>
<td align="center">运行指令</td>
<td align="center">npm run</td>
<td align="center">yarn run</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="六、源管理"><a href="#六、源管理" class="headerlink" title="六、源管理"></a>六、源管理</h3><blockquote>
<p>yarn也有类似的工具，即yrm。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yrm
</code></pre>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人网站详细教程</title>
    <url>/cmg.githua.io/p/b589d958.html</url>
    <content><![CDATA[<h2 id="GitHub-Hexo-搭建个人网站详细教程"><a href="#GitHub-Hexo-搭建个人网站详细教程" class="headerlink" title="GitHub+Hexo 搭建个人网站详细教程"></a>GitHub+Hexo 搭建个人网站详细教程</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，不过可能不是特别稳定。</p>
<p>下面本文就详细介绍下使用Hexo + GitHub搭建免费个人博客网站的教程</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/29755481">你见过的最棒的个人博客界面是什么样的？</a></p>
<h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo ?"></a><strong>什么是Hexo ?</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/0cmg/imgtu@develop/images/hexo/20210527092725.png" alt="图一"></p>
<blockquote>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub上，是搭建博客的首选框架。这里我们选用的是GitHub。Hexo同时也是GitHub上的开源项目，参见：<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo">hexojs/hexo</a> 如果想要更加全面的了解Hexo，可以到其官网 <a href="https://link.zhihu.com/?target=https://hexo.io/">Hexo</a> 了解更多的细节。</p>
</blockquote>
<h3 id="这是我的个人博客效果-Blog-CMG’s-Blog1"><a href="#这是我的个人博客效果-Blog-CMG’s-Blog1" class="headerlink" title="这是我的个人博客效果: [Blog](CMG’s Blog1)"></a><strong>这是我的个人博客效果:</strong> [Blog](<a href="https://0cmg.github.io/cmg.githua.io/">CMG’s Blog1</a>)</h3><blockquote>
<p>下面正式从零开始搭建年轻人的第一个网站。</p>
<ol>
<li><p>获得个人网站域名</p>
</li>
<li><p>GitHub创建个人仓库</p>
</li>
<li><p>安装Git</p>
</li>
<li><p>安装Node.js</p>
</li>
<li><p>安装Hexo</p>
</li>
<li><p>推送网站</p>
</li>
<li><p>绑定域名</p>
</li>
<li><p>更换主题</p>
</li>
<li><p>初识MarkDown语法</p>
</li>
<li><p>发布文章</p>
</li>
<li><p>寻找图床</p>
</li>
<li><p>个性化设置</p>
</li>
</ol>
</blockquote>
<h3 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a><strong>获得个人网站域名</strong></h3><blockquote>
<p>域名是网站的入口，使用GitHub托管我们的网站，完全不需要备案，因为托管我们的网站内容的服务器在美国，而且在国内备案流程也比较繁杂，时间需要一周左右。</p>
<p>申请域名的地方有很多，这里推荐阿里云：<a href="https://link.zhihu.com/?target=https://www.aliyun.com/">阿里云-为了无法计算的价值</a> 申请入口：<a href="https://link.zhihu.com/?target=https://wanwang.aliyun.com/domain/">域名注册</a> 购买域名这也是我们整个搭建过程中惟一一个需要花钱的地方。如果你已经有了空闲域名就无需购买，直接使用即可。</p>
</blockquote>
<h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a><strong>GitHub创建个人仓库</strong></h3><blockquote>
<p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://link.zhihu.com/?target=https://github.com/">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<strong>用户名</strong>.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210528111723.png" alt="图二"></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h3><blockquote>
<p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。 从Git官网下载：<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> 选择合适自己的版本安装。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210527093317.jpg" alt="图三"></p>
<blockquote>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的GitHub用户名"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"你的GitHub注册邮箱"</span>
</code></pre>
<p>生成ssh密钥文件：</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的GitHub注册邮箱"</span>
</code></pre>
<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210528111923.png" alt="图四"></p>
<p>打开<a href="https://link.zhihu.com/?target=https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210527093513.jpg" alt="图五"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com">git@github.com</a> ：</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210528112036.png" alt="图六"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
</blockquote>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h3><blockquote>
<p>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Node/20210527093952.png" alt="图七"></p>
<p>检测npm是否安装成功，在命令行中输入npm -v :</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Node/20210527093953.png" alt="图八"></p>
<p>到这了，安装Hexo的环境已经全部搭建完成。</p>
</blockquote>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h3><blockquote>
<p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p>
<p>打开命令行，进入新建的文件夹</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Hexo/20210527094246.png" alt="图九"></p>
<p>使用npm命令安装Hexo，输入：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli 
</code></pre>
<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p>
<pre class=" language-bash"><code class="language-bash">hexo init
</code></pre>
<p>注意，这里的命令都是作用在刚刚创建的hexo文件夹中。</p>
<p>为了检测我们的网站雏形，分别按顺序输入以下三条命令</p>
<pre class=" language-bash"><code class="language-bash">hexo new test_my_site

hexo g

hexo s
</code></pre>
<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Hexo/20210527094756.png" alt="图十"></p>
</blockquote>
<h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a><strong>Hexo常用命令</strong></h3><blockquote>
<p>现在来介绍常用的Hexo 命令</p>
<p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p>
</blockquote>
<h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a><strong>推送网站</strong></h3><blockquote>
<p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Hexo/20210527094854.jpg" alt="图十一"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Hexo/20210527170113.jpg" alt="图十二"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Git/20210527170350.png" alt="图十三"></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save
</code></pre>
<p>这时，我们分别输入三条命令：</p>
<pre class=" language-bash"><code class="language-bash">hexo clean 
hexo g 
hexo d
</code></pre>
<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p>
<pre class=" language-bash"><code class="language-bash">0cmg.github.io
</code></pre>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
</blockquote>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a><strong>绑定域名</strong></h3><blockquote>
<p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210528112331.png" alt="图十四"></p>
<p>然后添加解析</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210528112916.png" alt="图十五"></p>
<p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="https://link.zhihu.com/?target=http://xxxx.github.io">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210528113224.png" alt="图十六"></p>
<p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210528113151.png" alt="图十七"></p>
<p>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong>。</p>
<p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<pre><code>hexo clean
hexo g
hexo d
</code></pre>
<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p>
</blockquote>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a><strong>更换主题</strong></h3><blockquote>
<p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next
</code></pre>
<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为next</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170911.jpg" alt="图十八"></p>
<p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170854.jpg" alt="图十九"></p>
<p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
</blockquote>
<h3 id="初识Markdown语法"><a href="#初识Markdown语法" class="headerlink" title="初识Markdown语法"></a><strong>初识Markdown语法</strong></h3><blockquote>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/">MarkPad</a> 和<a href="https://link.zhihu.com/?target=http://www.markdownpad.com/">The Markdown Editor for Windows</a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p>
</blockquote>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a><strong>发布文章</strong></h3><blockquote>
<p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<pre><code>hexo n "博客名字"
</code></pre>
<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170856.jpg" alt="图二十"></p>
<p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
</blockquote>
<h3 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a><strong>寻找图床</strong></h3><blockquote>
<p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在source文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用Markdown语法，**<img src="%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" alt="图片信息">** 完成图片的插入，这种网站就被成为图床。常见的简易的图床网站有：<a href="https://link.zhihu.com/?target=http://www.tietuku.com/">贴图库图片外链</a> 国内算比较好的图床我认为有两个：新浪微博和 <a href="https://link.zhihu.com/?target=https://www.qiniu.com/">七牛云</a> ，七牛云的使用方法可以参看其他文章。图床最重要的就是稳定速度快，所以在挑选图床的时候一定要仔细，下图是博文插入图片，使用图床外链的示例：</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170909.jpg" alt="图二十一"></p>
</blockquote>
<h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a><strong>个性化设置</strong></h3><blockquote>
<p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p>
<p>基本的有：</p>
<p>在站点配置文件_config.yml修改基本的站点信息</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170901.jpg" alt="图二十二"></p>
<p>依次是网站标题、副标题、网站描述、作者、网站头像外部链接、网站语言、时区等。</p>
<p>在主题配置文件_config.yml修改基本的主题信息，如：</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170902.jpg" alt="图二十三"></p>
<p>博文打赏的微信、支付宝二维码图片，这里我是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170900.jpg" alt="图二十四"></p>
<p>社交外链的设置，即在侧栏展示你的个人社交网站信息。</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170905.jpg" alt="图二十五"></p>
<p>博文分享的插件jiathis，值设置为true。在配置文件中有很多的个性化设置，可以自尝试更多的修改。</p>
<p>进阶个性化：</p>
<ul>
<li>添加网易云音乐</li>
</ul>
<p>打开网页版的网易云音乐，选择喜欢的音乐，点击生成外链播放器</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170912.jpg" alt="图二十六"></p>
<p>复制外链的代码</p>
<p><img src="" alt="图二十七"></p>
<p>比如在侧栏插入这首歌的音乐播放器，修改 blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170858.jpg" alt="图二十八"></p>
<p>重新生成、部署网页，效果如下</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170855.jpg" alt="图二十九"></p>
<ul>
<li>设置背景</li>
</ul>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加：</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(/images/background.jpg)</span><span class="token punctuation">;</span>
  <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>background-attachment: fixed;是固定背景图片。</p>
<p>这是设置一张静态图片作为背景，其实Next主题自带有动态的背景效果，修改主题配置文件中的canvas_nest: false为canvas_nest: true即可。</p>
<ul>
<li>增加侧栏菜单条目</li>
</ul>
<p>默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方</p>
<p><img src="https://raw.githubusercontent.com/0cmg/imgtu/develop/images/Others/20210527170913.jpg" alt="图三十"></p>
<p>其中menu里是配置菜单项对应的页面位置（如：/love），menu_icons对应菜单项的图标，这里的图标是来自于<a href="https://link.zhihu.com/?target=http://fontawesome.io/">Font Awesome</a> ，所以你需要在Font Awesome网站上找到你需要的icon，然后把该icon的名字写在menu_icons对应菜单名后面，注意冒号有一个英文输入状态的空格。设置好后，在命令行里输入：</p>
<pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"你所要增加的菜单项名称（要和你在menu中的填写要匹配）"</span>
</code></pre>
<p>新建的页面在博客根目录下的source文件里，这时你就可以对新建的页面自定义设计。</p>
<p>还有更多的进阶个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等，可以参看：</p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></p>
<p><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/tag-plugins.html">档</a><a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/advanced-settings.html">进阶设定 - NexT 使用文档</a></p>
<p>有很多人私信问我High功能特效如何设置，这里推荐一篇同是Next主题网站博主的文章：<a href="https://link.zhihu.com/?target=http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">为Hexo Next主题添加哈林摇特效（五）</a></p>
</blockquote>
<h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a><strong>相关文章</strong></h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/58654392">Hexo 从 GitHub 到阿里云</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>GitHub+Hexo搭建个人网站</tag>
        <tag>website</tag>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
